//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input System/PlayerActionsAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionsAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionsAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionsAsset"",
    ""maps"": [
        {
            ""name"": ""PointAndClick"",
            ""id"": ""ef30b039-d59b-46e5-870d-e2dd4e9057c2"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""224ededa-faaa-4118-a48a-43ffaff3bf72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9ba9e99c-8689-4e54-9d39-3a32cb235a46"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c6421950-4488-4534-ab65-b39373634302"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""58d81af5-9218-4b98-8029-10781c893850"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6d45f07a-610c-4852-9cb8-18792327382e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""81a7cf15-0327-497c-8de3-c363fbd9f55a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""143bb1cd-cc10-4eca-a2f0-a3664166fe91"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f6913d-c316-48b2-a6bb-e225f14c7960"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""886e731e-7071-4ae4-95c0-e61739dad6fd"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Touch"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee3d0cd2-254e-47a7-a8cb-bc94d9658c54"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8255d333-5683-4943-a58a-ccb207ff1dce"",
                    ""path"": ""<XRController>/{PrimaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81e12f0e-de55-4b88-a10c-118684497144"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96cb47a4-4ef2-4050-b0ac-ee16a4a50d6c"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2e783a6-d009-4ac8-bb36-e9f90fea57ae"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cee70afa-f4d3-450b-964f-e537c6e33f68"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9ab43cd-6d6c-4af6-b84b-96a3f72b4c26"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e0cca16-1baa-4e3b-9e81-8956c397fa6f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f40b14a-b99a-4de3-8d6c-df3a8f82dbbd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapControls"",
            ""id"": ""1d3e2b10-76a0-484f-a909-790f413ac876"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a53c8bc-08c9-4070-8ea6-5aba6cb36a75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5da7517-acad-45fb-aa3a-6d68334c40fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""668d92aa-39ed-453f-952c-61ef0469aeac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bcac8e74-1b34-4dd5-8bb1-6879fddc292b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""99882ee8-a41e-49b5-96e7-2e15d3c7b72e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""4c5471f8-9a7b-4aa6-b65a-b4cae2bd9389"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4faf7dc9-b979-4210-aa8c-e808e1ef89f5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d66d5ba-88d7-48e6-b1cd-198bbfef7ace"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47c2a644-3ebc-4dae-a106-589b7ca75b59"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb9e6b34-44bf-4381-ac63-5aa15d19f677"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38c99815-14ea-4617-8627-164d27641299"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24066f69-da47-44f3-a07e-0015fb02eb2e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c191405-5738-4d4b-a523-c6a301dbf754"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c52c8e0b-8179-41d3-b8a1-d149033bbe86"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1394cbc-336e-44ce-9ea8-6007ed6193f7"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5693e57a-238a-46ed-b5ae-e64e6e574302"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05368ff3-98b7-47e3-8753-81322b3b0ddd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Transition"",
            ""id"": ""6fc7106d-fa66-4d86-98ee-c70c81de4936"",
            ""actions"": [
                {
                    ""name"": ""SkipCinematic"",
                    ""type"": ""Button"",
                    ""id"": ""96cbce78-8bff-470f-b6e4-df511f46c3e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3cb4679-f1a3-45bd-873a-4e9708c89ac3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SkipCinematic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PointAndClick
        m_PointAndClick = asset.FindActionMap("PointAndClick", throwIfNotFound: true);
        m_PointAndClick_Click = m_PointAndClick.FindAction("Click", throwIfNotFound: true);
        m_PointAndClick_Point = m_PointAndClick.FindAction("Point", throwIfNotFound: true);
        m_PointAndClick_ScrollWheel = m_PointAndClick.FindAction("ScrollWheel", throwIfNotFound: true);
        m_PointAndClick_MiddleClick = m_PointAndClick.FindAction("MiddleClick", throwIfNotFound: true);
        m_PointAndClick_RightClick = m_PointAndClick.FindAction("RightClick", throwIfNotFound: true);
        m_PointAndClick_Escape = m_PointAndClick.FindAction("Escape", throwIfNotFound: true);
        // MapControls
        m_MapControls = asset.FindActionMap("MapControls", throwIfNotFound: true);
        m_MapControls_Click = m_MapControls.FindAction("Click", throwIfNotFound: true);
        m_MapControls_Point = m_MapControls.FindAction("Point", throwIfNotFound: true);
        m_MapControls_ScrollWheel = m_MapControls.FindAction("ScrollWheel", throwIfNotFound: true);
        m_MapControls_MiddleClick = m_MapControls.FindAction("MiddleClick", throwIfNotFound: true);
        m_MapControls_RightClick = m_MapControls.FindAction("RightClick", throwIfNotFound: true);
        m_MapControls_Escape = m_MapControls.FindAction("Escape", throwIfNotFound: true);
        // Transition
        m_Transition = asset.FindActionMap("Transition", throwIfNotFound: true);
        m_Transition_SkipCinematic = m_Transition.FindAction("SkipCinematic", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PointAndClick
    private readonly InputActionMap m_PointAndClick;
    private IPointAndClickActions m_PointAndClickActionsCallbackInterface;
    private readonly InputAction m_PointAndClick_Click;
    private readonly InputAction m_PointAndClick_Point;
    private readonly InputAction m_PointAndClick_ScrollWheel;
    private readonly InputAction m_PointAndClick_MiddleClick;
    private readonly InputAction m_PointAndClick_RightClick;
    private readonly InputAction m_PointAndClick_Escape;
    public struct PointAndClickActions
    {
        private @PlayerActionsAsset m_Wrapper;
        public PointAndClickActions(@PlayerActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_PointAndClick_Click;
        public InputAction @Point => m_Wrapper.m_PointAndClick_Point;
        public InputAction @ScrollWheel => m_Wrapper.m_PointAndClick_ScrollWheel;
        public InputAction @MiddleClick => m_Wrapper.m_PointAndClick_MiddleClick;
        public InputAction @RightClick => m_Wrapper.m_PointAndClick_RightClick;
        public InputAction @Escape => m_Wrapper.m_PointAndClick_Escape;
        public InputActionMap Get() { return m_Wrapper.m_PointAndClick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PointAndClickActions set) { return set.Get(); }
        public void SetCallbacks(IPointAndClickActions instance)
        {
            if (m_Wrapper.m_PointAndClickActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnClick;
                @Point.started -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnPoint;
                @ScrollWheel.started -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.performed -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.canceled -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnScrollWheel;
                @MiddleClick.started -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.performed -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.canceled -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnMiddleClick;
                @RightClick.started -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnRightClick;
                @Escape.started -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_PointAndClickActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_PointAndClickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public PointAndClickActions @PointAndClick => new PointAndClickActions(this);

    // MapControls
    private readonly InputActionMap m_MapControls;
    private IMapControlsActions m_MapControlsActionsCallbackInterface;
    private readonly InputAction m_MapControls_Click;
    private readonly InputAction m_MapControls_Point;
    private readonly InputAction m_MapControls_ScrollWheel;
    private readonly InputAction m_MapControls_MiddleClick;
    private readonly InputAction m_MapControls_RightClick;
    private readonly InputAction m_MapControls_Escape;
    public struct MapControlsActions
    {
        private @PlayerActionsAsset m_Wrapper;
        public MapControlsActions(@PlayerActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_MapControls_Click;
        public InputAction @Point => m_Wrapper.m_MapControls_Point;
        public InputAction @ScrollWheel => m_Wrapper.m_MapControls_ScrollWheel;
        public InputAction @MiddleClick => m_Wrapper.m_MapControls_MiddleClick;
        public InputAction @RightClick => m_Wrapper.m_MapControls_RightClick;
        public InputAction @Escape => m_Wrapper.m_MapControls_Escape;
        public InputActionMap Get() { return m_Wrapper.m_MapControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMapControlsActions instance)
        {
            if (m_Wrapper.m_MapControlsActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnClick;
                @Point.started -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnPoint;
                @ScrollWheel.started -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.performed -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnScrollWheel;
                @ScrollWheel.canceled -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnScrollWheel;
                @MiddleClick.started -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.performed -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnMiddleClick;
                @MiddleClick.canceled -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnMiddleClick;
                @RightClick.started -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnRightClick;
                @Escape.started -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_MapControlsActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_MapControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public MapControlsActions @MapControls => new MapControlsActions(this);

    // Transition
    private readonly InputActionMap m_Transition;
    private ITransitionActions m_TransitionActionsCallbackInterface;
    private readonly InputAction m_Transition_SkipCinematic;
    public struct TransitionActions
    {
        private @PlayerActionsAsset m_Wrapper;
        public TransitionActions(@PlayerActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipCinematic => m_Wrapper.m_Transition_SkipCinematic;
        public InputActionMap Get() { return m_Wrapper.m_Transition; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TransitionActions set) { return set.Get(); }
        public void SetCallbacks(ITransitionActions instance)
        {
            if (m_Wrapper.m_TransitionActionsCallbackInterface != null)
            {
                @SkipCinematic.started -= m_Wrapper.m_TransitionActionsCallbackInterface.OnSkipCinematic;
                @SkipCinematic.performed -= m_Wrapper.m_TransitionActionsCallbackInterface.OnSkipCinematic;
                @SkipCinematic.canceled -= m_Wrapper.m_TransitionActionsCallbackInterface.OnSkipCinematic;
            }
            m_Wrapper.m_TransitionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SkipCinematic.started += instance.OnSkipCinematic;
                @SkipCinematic.performed += instance.OnSkipCinematic;
                @SkipCinematic.canceled += instance.OnSkipCinematic;
            }
        }
    }
    public TransitionActions @Transition => new TransitionActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPointAndClickActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnMiddleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IMapControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnMiddleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ITransitionActions
    {
        void OnSkipCinematic(InputAction.CallbackContext context);
    }
}
